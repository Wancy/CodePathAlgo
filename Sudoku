public class Solution {
	public void solveSudoku(ArrayList<ArrayList<Character>> a) {
	    if (a == null || a.size() == 0) return;
	    isSolution(a);
	    
	}
	
	private boolean isSolution(ArrayList<ArrayList<Character>> a) {
	    for (int i = 0; i < a.size(); i++) {
	        for (int j = 0; j < a.get(i).size(); j++) {
	            if (a.get(i).get(j) == '.') {
	                for (char c = '1'; c <= '9'; c++) {
	                    if (isValid(a, i, j, c)) {
	                        a.get(i).set(j, c);
	                        if (isSolution(a)) {
	                            return true;
	                        } else {
	                            a.get(i).set(j, '.');
	                        }
	                    } 
	                }
	                return false;
	            } 
	        }
	    }
	    return true;
	}
	
	private boolean isValid(ArrayList<ArrayList<Character>> a, int row, int col, char c) {
	    for (int i = 0; i < 9; i++) {
	        if (a.get(row).get(i) == c) return false;
	        if (a.get(i).get(col) == c) return false;
	        if (a.get(row / 3 * 3 + i / 3).get(col / 3 * 3 + i % 3) == c) return false;
	    }
	    return true;
	}
}
