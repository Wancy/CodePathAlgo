public class Solution {
    public int knight(int A, int B, int C, int D, int E, int F) {

        return bfs(A, B, new Coordinate(C, D), new Coordinate(E, F));
    }

    private int bfs(int A, int B, Coordinate start, Coordinate end) {
        Queue<Coordinate> queue = new LinkedList<>();
        if (start.x == end.x && start.y == end.y) return 0;
        int[] x = new int[]{-2, -1, 1, 2, -1, -2, 1, 2};
        int[] y = new int[]{-1, -2, 2, 1, 2, 1, -2, -1};
        boolean[][] visited = new boolean[A + 1][B + 1];
        int res = 0;
        queue.add(start);
        visited[start.x][start.y] = true;
        int count = 0;
        while (!queue.isEmpty()) {
            count = queue.size();
            res++;
            while (count > 0) {
                count--;
                Coordinate curr = queue.poll();
                for (int i = 0; i < 8; i++) {
                    int newC = curr.x + x[i];
                    int newD = curr.y + y[i];
                    if (newC < 1 || newD < 1 || newC > A || newD > B) continue;
                    if (visited[newC][newD]) continue;
                    visited[newC][newD] = true;
                    if (newC == end.x && newD == end.y) return res;
                    queue.add(new Coordinate(newC, newD));

                }
            }
        }
        return -1;
    }
}

class Coordinate{
    int x;
    int y;
    public Coordinate(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
